# num is also the length of the result vector
#print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = x[i*shift-shift+1:min(i*shift-shift+size,length(x))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(x)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
x = unlist(strsplit ("CATACCTTCCAAA", split=''))
f = frequency_in_sliding_window(x,"T",6,6)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
#print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[i*shift-shift+1:min(i*shift-shift+size,length(sequence))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
x = c("C", "A", "C", "A", "A", "A", "A", "T", "A", "A", "T", "T", "T", "A", "G", "C", "A", "G", "C")
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
#print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[i*shift-shift+1:min(i*shift-2*shift+size,length(sequence))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
#print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[i*shift-shift+1:min(i*shift-shift+size,length(sequence))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
#print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[i*shift-shift+1:i*shift-shift+size]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[i*shift-shift+1:i*shift-shift+size]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[(i*shift-shift+1):(i*shift-shift+size)]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[(i*shift-shift+1):min((i*shift-shift+size),length(sequence))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"T",6,4)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[(i*shift-shift+1):min((i*shift-shift+size),length(sequence))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/size
}
print(freq[i])
}
print(length(freq))
return(freq)
}
x = c("G", "T", "G", "A", "G", "C", "C", "G", "A", "G", "T", "G", "A", "C", "T", "C", "C", "A", "A", "T", "T", "T", "G", "G", "A", "A", "A", "T", "A", "C", "T", "C", "C", "T", "C", "C", "G", "A")
f = frequency_in_sliding_window(x,"A",18,17)
length(x)
frequency_in_sliding_window <- function (sequence,ntd,size,shift) {
# sequence : vector of characters
# ntd : character corresponding to a nucleotide
# size : of the slinding window
# shift : between successive sliding window positions
num = nb_sliding_windows(length(sequence),size,shift) # number of possible sliding windows
# num is also the length of the result vector
print(num)
freq = numeric(num)
#print(freq)
for (i in seq(1:num)) {
string = sequence[(i*shift-shift+1):min((i*shift-shift+size),length(sequence))]
print(string)
print(i*shift-shift+1)
print(min(i*shift-shift+size,length(sequence)))
freq[i] = count(string,ntd)
print(freq)
if (freq[i] != 0) {
freq[i] = freq[i]/length(string)
}
print(freq[i])
}
print(length(freq))
return(freq)
}
f = frequency_in_sliding_window(x,"A",18,17)
install.packages("datatable")
av <- available.packages(filters=list())
av[av[, "Package"] == "datatable", ]
av[av[, "Package"] == pkg, ]
av[av[, "Package"] == "table", ]
View(av)
library(ape)
library(seqinr)
library(Biostrings)
pairwiseAlignmentResult = function(pattern, subject, type, substitutionMatrix, gapOpening, gapExtension) {
align <- pairwiseAlignment(pattern, subject, substitutionMatrix=substitutionMatrix, gapOpening=gapOpening, gapExtension=gapExtension, type=type)
length_align = 0
if (type == "global") {
length_align <- width(unaligned(pattern(align)))
}
else {
length_align <- width(pattern(align))
}
if (length_align == 0) {
return (0)
}
else {
return (score(align)/length_align)
}
}
# Question 4: Alignment result
pattern <- read.GenBank("MW090859.1", as.character=TRUE)
########## [A2.2] Pairwise alignment ##########
s1 <- "ATTCCGA"
s2 <- "TATCG"
mat <- nucleotideSubstitutionMatrix(match = 2, mismatch = -1, baseOnly = TRUE)
# Question 1: [Validation] A global pairwise alignment example
globalAlign <- pairwiseAlignment(s1, s2, substitutionMatrix = mat, gapOpening = 0, gapExtension = 4)
globalAlign
pattern(globalAlign)
unaligned(pattern(globalAlign))
width(unaligned(pattern(globalAlign)))
a = 3
a**(-1)
freq2dist <- function(freq, nbStates) {
prob <- 1/nbStates
distance <- -(1-prob)*log(1-freq*(1-prob)**(-1), base=exp(1))
}
freq2dist(0.49, 4)
freq2dist <- function(freq, nbStates) {
prob <- 1/nbStates
distance <- -(1-prob)*log(1-freq*(1-prob)**(-1), base=exp(1))
return(distance)
}
freq2dist(0.49, 4)
relativeFrequencies <- readRDS("C:/Users/letiz/OneDrive - UniversitÃ  degli Studi di Padova/ERASMUS/Courses/Bioinformatics/Practical/P2/relativeFrequencies.rds")
View(relativeFrequencies)
length(relativeFrequencies)
nrows(relativeFrequencies)
length(relativeFrequencies[:,1])
length(relativeFrequencies[,1])
distances <- c()
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distance <- freq2dist(frequencies[i,j], 4)
distances <- append(distances, distance)
}
}
distances <- c()
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distance <- freq2dist(relativeFrequencies[i,j], 4)
distances <- append(distances, distance)
}
}
distances
max(distances)
find(distances == max(distances))
which(distances == max(distances))
distances[3239]
distances[3230:3245]
dist(distances)
a <- "ATGCGT"
sample(a)
sample(a[[1]])
s2c(a)
sample(a)
b <-s2c(a)
sample(b)
c2s(sample(b))
distances <- matrix(0, nrow=length(relativeFrequencies[,1]), ncol=length(relativeFrequencies[,1]))
# rownames(distances) <- new_subset_names
# colnames(frequencies) <- new_subset_names
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distances[i,j] <- freq2dist(relativeFrequencies[i,j], 4)
distances[j,i] <- distances[i,j]
}
}
View(distances)
dist(distances)
as.dist(distances)
d <- as.dist(distances)
d
hclust(d)
hclust(d)
tree <- hclust(d)
View(relativeFrequencies)
View(tree)
plot(tree)
phylo_tree <- as.phylo(tree)
plot(phylo_tree)
distances <- matrix(0, nrow=length(relativeFrequencies[,1]), ncol=length(relativeFrequencies[,1]))
# rownames(distances) <- new_subset_names
# colnames(frequencies) <- new_subset_names
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distances[i,j] <- freq2dist(relativeFrequencies[i,j], 4)
distances[j,i] <- 0
}
}
distances <- matrix(0, nrow=length(relativeFrequencies[,1]), ncol=length(relativeFrequencies[,1]))
# rownames(distances) <- new_subset_names
# colnames(frequencies) <- new_subset_names
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distances[i,j] <- freq2dist(relativeFrequencies[i,j], 4)
distances[j,i] <- 0
}
}
d <- as.dist(distances)
tree <- hclust(d)
phylo_tree <- as.phylo(tree)
plot(phylo_tree)
d
print(d)
distances
View(distances)
distances <- matrix(0, nrow=length(relativeFrequencies[,1]), ncol=length(relativeFrequencies[,1]))
# rownames(distances) <- new_subset_names
# colnames(frequencies) <- new_subset_names
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distances[i,j] <- freq2dist(relativeFrequencies[i,j], 4)
#distances[j,i] <-
}
}
d <- as.dist(d)
d <- as.dist(distances)
d
nj(distances)
plot(nj(distances))
max_dist <- max(distances)
max_dist
ind_max <- which(distances == max(distances))
ind_max
distances[6389]
min_row, min_col <- which(distances == min(distances))
min_row <- which(distances == min(distances))
min_row
min_row <- which(distances == min(distances), arr.ind = TRUE)
min_row
min_dist, ind <- which(distances == min(distances), arr.ind = TRUE)
ind_min <- which(distances == min(distances), arr.ind = TRUE)
distances[ind_min]
distances <- matrix(0, nrow=length(relativeFrequencies[,1]), ncol=length(relativeFrequencies[,1]))
# rownames(distances) <- new_subset_names
# colnames(frequencies) <- new_subset_names
for (i in seq(1:length(relativeFrequencies[,1]))) {
max_row <- i
for (j in seq(1:max_row)) {
distances[i,j] <- freq2dist(relativeFrequencies[i,j], 4)
distances[j,i] <- distances[i,j]
}
}
d <- as.dist(distances)
tree <- hclust(d)
phylo_tree <- as.phylo(tree)
## UPGMA
C <- subset
T <- phylo_tree
ind_min <- which(distances == min(distances), arr.ind = TRUE)
distances[ind_min]
ind_min
distances_not_diagonal <- distances[which(distances != 0)]
distances_not_diagonal
ind_min <- which(distances_not_diagonal == min(distances_not_diagonal), arr.ind = TRUE)
distances_not_diagonal[ind_min]
ind_min
distances_not_diagonal[ind_min[1],ind_min[2]]
distances_not_diagonal[ind_min[[1]],ind_min[[2]]]
distances_not_diagonal[ind_min][1]
ind_min[1]
ind_min[2]
distances[2,82]
width(distances_not_diagonal)
size(distances_not_diagonal)
object.size(distances_not_diagonal)
nrows(distances_not_diagonal)
distances_not_diagonal
distances_not_diagonal <- matrix(distances[which(distances != 0)], nrow=length(relativeFrequencies[,1])-1, ncol=length(relativeFrequencies[,1])-1)
length(relativeFrequencies[,1])
length(distances_not_diagonal)
distances_not_diagonal <- distances[which(distances != 0)]
length(distances_not_diagonal)
6480**(-1/2)
80*80
81*81
distances_not_diagonal <- matrix(distances[which(distances != 0)],nrow=length(relativeFrequencies[,1]), ncol=length(relativeFrequencies[,1])-1)
distances_not_diagonal
ind_min <- which(distances_not_diagonal == min(distances_not_diagonal), arr.ind = TRUE)
View(ind_min)
distances_not_diagonal[ind_min][1]
ind_min[1]
ind_min[1,]
View(distances)
View(distances_not_diagonal)
library(ape)
library(seqinr)
library(Biostrings)
library(tidyverse)
library(gplots)
####### [A3.1] Assignment description #######################################
# Load data
file_connection_train <- gzfile('train.csv.bz2', 'rt')
library(VIM)
install(VIM)
install.packages("VIM")
library(VIM)
help read.csv()
help(read.csv())
help(read.csv)
missing_values_pd <- read.csv("missing_values_pd", header = FALSE)
setwd("C:/Users/letiz/OneDrive - UniversitÃ  degli Studi di Padova/0. SECONDO SEMESTRE/Biomarkers/HOMEWORK/HM---BPMDD")
missing_values_pd <- read.csv("missing_values_pd", header = FALSE)
missing_values_pd <- read.csv("missing_values_pd.csv", header = FALSE)
missing_values_hc <- read.csv("missing_values_hc.csv", header = FALSE)
matrixplot(missing_values_hc)
matrixplot(missing_values_pd)
barMiss(missing_values_hc)
aggr(missing_values_hc)
aggr(missing_values_hc, numbers=TRUE, prop=FALSE)
missing_values_hc = t(missing_values_hc)
missing_values_pd = t(missing_values_pd)
matrixplot(missing_values_hc)
matrixplot(missing_values_pd)
barMiss(missing_values_hc)
barMiss(missing_values_pd)
aggr(missing_values_hc, numbers=TRUE, prop=FALSE)
## load data
data = read.csv("Patient_Master.csv")
aggr(data)
new_data_hc = read.csv("new_data_hc.csv")
